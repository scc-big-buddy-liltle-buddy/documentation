{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":""},{"location":"#welcome-to-the-saigonchildren-documentation","title":"Welcome to the Saigonchildren Documentation","text":""},{"location":"#about-us","title":"About us","text":"<p>Saigon Children's Charity CIO (saigonchildren) was founded in 1992 to help disadvantaged children get an education and a fairer start in life. Saigonchildren works exclusively across the whole of Vietnam to overcome barriers to education for children, including poverty, geography, knowledge, and disability.</p> <p></p>"},{"location":"#about-the-project","title":"About the project","text":"<p>Mentoring project Big Buddy, Little Buddy (BBLB) or Mentor-To-Mentee (M2M) is a program aiming to provide holistic development for saigonchildren's scholarship recipients, the BBLB initiative serves as a bridge connecting generations between our students, the 'little buddies,' and 'big buddies,' who are our scholarship alumni, corporate partners, and staff, all dedicated to nurturing future leaders.</p> <p></p>"},{"location":"#guidelines-to-contribute","title":"Guidelines to contribute","text":"<p>Below is the list of guidelines and documentation for the project:</p> <ul> <li> <p>Software Requirement Specification A detailed document that outlines the software requirements for the project.</p> </li> <li> <p>Development Guidelines  A comprehensive guide for developers to follow when working on the project.</p> </li> <li> <p>API Documentation A detailed guide on how to use the API endpoints.</p> </li> <li> <p>Contact Information A list of contact information for the project team.</p> </li> </ul>"},{"location":"contact/","title":"Volunteers","text":"Full name Country Phone (Optional) Email (Optional) Start date End date Tran Cong Toan Vietnam (+84) 76 939 4157 tctoan1024@gmail.com 06/2024 Present"},{"location":"contact/#contact-information","title":"Contact Information","text":""},{"location":"contact/#staff","title":"Staff","text":"<p>Meet our team here: Saigonchildren Team</p>"},{"location":"contact/#official-website","title":"Official Website","text":"<p>\ud83c\udf10 saigonchildren.com</p>"},{"location":"contact/#social-media","title":"Social Media","text":""},{"location":"software_requirement_specification/","title":"Software Requirement Specification","text":""},{"location":"software_requirement_specification/#software-requirement-specification","title":"Software Requirement Specification","text":""},{"location":"software_requirement_specification/#1-introduction","title":"1. Introduction","text":"<p>The Mentor-Mentee Management System aims to facilitate structured mentorship by connecting mentors and mentees, enabling communication, automating matching process, session scheduling, progress tracking, and administrative oversight for the program.</p>"},{"location":"software_requirement_specification/#2-scope","title":"2. Scope","text":""},{"location":"software_requirement_specification/#21-scope-of-the-project","title":"2.1. Scope of the project","text":"<ul> <li>Admin Site: Saigonchildren staff (Admin) can manage users, mentors, mentees, sessions, and program settings.</li> <li>Portal for mentors and mentees: Users can view their profile, mentor/mentee profile, and session history.</li> </ul>"},{"location":"software_requirement_specification/#22-overview-of-the-system","title":"2.2. Overview of the system","text":"<p>We have three main user roles in the system are <code>Admin</code>, <code>Mentor</code>, and <code>Mentee</code>.</p> <p>Admin can manage users, mentors, mentees, sessions, and program settings. The Admin can make <code>CRUD</code> operations on the following entities: <code>Users</code> (Mentors and Mentees), <code>Matches</code> includes <code>Mentor-Mentee</code> pairs or <code>Group</code>, <code>Documents</code>.</p> <p>Admin can create matching rules for mentors and mentees. Then admin can run the matching algorithm to match mentors and mentees based on the rules.</p>"},{"location":"software_requirement_specification/#221-matching-in-the-system","title":"2.2.1 Matching in the system","text":"<p>The program is seasonal, and each season has a start date and an end date. After the season end, the account of mentors and mentees will be prevented from matching system (the user will be notified). The Admin can create a new season and continue the program. If the user wants to join the program, they need to register for the new season by updating their profile to make a request to join the program.</p> <p>In one program season, <code>One mentor can be matched with many mentees</code>. <code>One mentee can be matched with one mentor</code>. We call a <code>Group</code> is a collection of one mentor and many mentees. </p> <p>A <code>Match</code> is a collection of many groups. </p>"},{"location":"software_requirement_specification/#3-functional-requirements","title":"3. Functional requirements","text":""},{"location":"software_requirement_specification/#31-core-features","title":"3.1 Core features","text":"<p>Below are the core features of the system:</p> <p></p>"},{"location":"software_requirement_specification/#32-user-interaction-system-workflow","title":"3.2 User interaction &amp; System workflow","text":"<p>We have three main user roles in the system are <code>Admin</code>, <code>Mentor</code>, and <code>Mentee</code>.</p> <p>Below is the use case diagram for the system:</p> <p></p>"},{"location":"software_requirement_specification/#33-core-workflows","title":"3.3 Core workflows","text":"<p>Business processes in the system:</p>"},{"location":"software_requirement_specification/#331-mentee-authentication-flow","title":"3.3.1 Mentee authentication flow","text":""},{"location":"software_requirement_specification/#332-mentor-authentication-flow","title":"3.3.2 Mentor authentication flow","text":"<ul> <li>Mentor registers an account then the mentor will be approved by the Admin. The mentor will be notified by email when the account is approved. The mentor can log in to the system with some other page approved by the Admin.</li> </ul>"},{"location":"software_requirement_specification/#333-admin-authentication-flow","title":"3.3.3 Admin authentication flow","text":""},{"location":"software_requirement_specification/#334-matching-flow","title":"3.3.4 Matching flow","text":"<p>In the matching flow we have two main steps: <code>Create matching rules</code> and <code>Run matching algorithm</code>.</p> <p></p> <p>After that admin need to accept the mentee </p> <p></p>"},{"location":"software_requirement_specification/#334-group-documents","title":"3.3.4 Group documents","text":"<p>We have two type of documents for a group: Resources and agreements.</p> <p>Resource hub flow for mentor in a group:  </p> <p>Agreement flow for mentor in a group:</p> <p></p>"},{"location":"software_requirement_specification/#335-group-tasks","title":"3.3.5 Group tasks","text":""},{"location":"software_requirement_specification/#336-admin-manage-users","title":"3.3.6 Admin manage users","text":"<ul> <li>Admin manages users.</li> </ul>"},{"location":"software_requirement_specification/#337-admin-manage-matches","title":"3.3.7 Admin manage matches","text":"<ul> <li>Admin manages matches.</li> </ul>"},{"location":"software_requirement_specification/#4-system-architecture-design","title":"4. System architecture &amp; Design","text":""},{"location":"software_requirement_specification/#41-class-diagram","title":"4.1 Class Diagram","text":"<p>As above use case diagram, we have three main components in the system are <code>Admin</code>, <code>Mentor</code>, and <code>Mentee</code>. Below is the class diagram for the system:</p>"},{"location":"software_requirement_specification/#42-database-design","title":"4.2 Database design","text":"<p>For the best performance, we use MySQL as the database for the system. We use Physical Data Model to design the database schema.</p> <p></p>"},{"location":"software_requirement_specification/#43-matching-algorithm-design","title":"4.3. Matching algorithm design","text":"<p>I am working on the design of the matching algorithm here: Matching Algorithm Design</p>"},{"location":"software_requirement_specification/#44-user-interface-design","title":"4.4. User interface design","text":"<p>Our team is working on the design of the user interface here: Figma</p>"},{"location":"software_requirement_specification/#45-technologies","title":"4.5. Technologies","text":"<ul> <li>Backend: FastAPI, SQLAlchemy, MySQL, Alembic, Pydantic, JWT, Docker, Docker Compose</li> <li>Frontend: React, Zustand, Axios, AntD</li> <li>CI/CD: Github Actions</li> </ul>"},{"location":"software_requirement_specification/#5-non-functional-requirements","title":"5. Non-functional requirements","text":""},{"location":"software_requirement_specification/#51-performance","title":"5.1. Performance","text":"<ul> <li>The system should be able to handle 100 concurrent users.</li> <li>The system should be able to handle 100 requests per second.</li> <li>The system should be able to handle 1000 users.</li> <li>The system should be able to handle 1000 sessions.</li> </ul>"},{"location":"software_requirement_specification/#52-security","title":"5.2. Security","text":"<ul> <li>The system should use JWT for authentication.</li> <li>The system should use HTTPS for all requests.</li> <li>The system should use CORS to prevent unauthorized requests.</li> </ul>"},{"location":"software_requirement_specification/#53-availability","title":"5.3. Availability","text":"<ul> <li>The system should have an uptime of 99.9%.</li> </ul>"},{"location":"software_requirement_specification/#6-testing-requirements","title":"6. Testing Requirements","text":"<ul> <li>The system should have unit tests for all components.</li> <li>The system should have integration tests for all components.</li> <li>The system should have end-to-end tests for all components.</li> <li>The system should have performance tests for all components.</li> </ul> <p>I will update soon.</p>"},{"location":"software_requirement_specification/#7-project-timeline","title":"7. Project timeline","text":"Phase Start date End date (Expect) Requirement gathering 08/08/2024 30/11/2024 Design and prototyping 30/11/2024 10/02/2025 Development 08/02/2025 08/05/2025 Testing 10/05/2025 10/05/2025 Deployment 11/05/2025 11/06/2025"},{"location":"software_requirement_specification/#8-revisions","title":"8. Revisions","text":"Version Date Description 0.0.1 12/02/2025 Init documentation"},{"location":"software_requirement_specification/#9-appendices","title":"9. Appendices","text":""},{"location":"software_requirement_specification/#91-glossary","title":"9.1 Glossary","text":"<ul> <li>Admin: Saigonchildren staff who manages the system.</li> <li>CRUD: Create, Read, Update, Delete operations.</li> </ul>"},{"location":"software_requirement_specification/#10-signatures","title":"10. Signatures","text":"<ul> <li> <p>Project owner: Saigonchildren</p> </li> <li> <p>Author: Tran Cong Toan - tctoan1024@gmail.com</p> </li> </ul>"},{"location":"development_guidelines/version_control/Git_branch_naming_convention/","title":"Git Branch Naming Convention","text":"<p>Thanks for tutorial article from Git Branch Naming Conventions that we apply in our projet at Saigonchildren M2M version control system.</p>"},{"location":"development_guidelines/version_control/Git_branch_naming_convention/#git-branch-name-restrictions","title":"Git branch name restrictions","text":"<ul> <li>Characters: Branch names can include letters, numbers, dashes (-), underscores (_), and dots (.), but they cannot begin with a dot or end with a slash (/).</li> <li>Case sensitivity: Git is case-sensitive, so Feature and feature are considered different branches.</li> <li>Reserved names: Names like HEAD, FETCH_HEAD, ORIG_HEAD, and others are reserved by Git and cannot be used as branch names.</li> <li>Length: While there's no strict limit on the length of branch names, it's practical to keep them concise to make them easier to manage.</li> </ul>"},{"location":"development_guidelines/version_control/Git_branch_naming_convention/#git-branch-prefixes","title":"Git branch prefixes","text":"<p>We use the stratedy to categorize branches based on their purpose:</p> <ul> <li>Feature branches: Prefixed with feature/, these branches are used to develop new features.</li> <li>Bugfix branches: Prefixed with bugfix/, these branches are used to make fixes.</li> <li>Release branches: Prefixed with release/, these branches prepare a codebase for new releases.</li> <li>Hotfix branches: Prefixed with hotfix/, these branches address urgent issues in production.</li> </ul>"},{"location":"development_guidelines/version_control/Git_branch_naming_convention/#git-flow-branch-naming-conventions","title":"Git Flow branch naming conventions","text":"<p>Git Flow is a branching model that outlines a strict branching strategy designed for managing releases. The main branches in Git Flow include:</p> <ul> <li>Main branch: Serves as the primary branch where the codebase's current production state is reflected.</li> <li>Develop branch: Aggregates developments and features before they are released to the main branch.</li> <li>Feature branches: Typically follow the naming pattern feature/*, these branches are used to develop new features.</li> <li>Release branches: Named like release/*, these branches help manage the release process.</li> <li>Hotfix branches: Named hotfix/*, these branches are created to quickly patch production releases.</li> </ul>"}]}